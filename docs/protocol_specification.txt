PROTOCOL SPECIFICATION FOR FILES CLIENT-SERVER COMUNICATION

1. ================== Packet specification ==================

The first byte of the packet is always the opcode. Any eventual following data is
dependent on the opcode:

- COMP: the operation completed successfully.
    ------------
    | COMP (1) |
    ------------

- ACK: this is like COMP but is used when the operation is performed
    across multiple packets. The meaning is that the packet is received, but
    it is expected more.
    -----------
    | ACK (1) |
    -----------

- ERROR: there has been an error.
    The error is transimtted after the opcode and it is 1 byte long (interpreted as char)
    ----------------------------
    | ERROR (1) | err_code (1) |
    ----------------------------

- CLOSE_CONNECTION: request for closing the connection
    ------------------------
    | CLOSE_CONNECTION (1) |
    ------------------------

- DATA: the packet contains some binary data
    The first 8 bytes (interpreted as an unsigned long) are the data size.
    Then data_size bytes represent the actual data.
    -----------------------------------------------
    | DATA (1) | data_size (8) | data (data_size) |
    -----------------------------------------------

- FILE_P: the packet contains a file
    The first 8 bytes (interpreted as an unsigned long) are the filename size.
    Then name_length bytes represent the name of the file represented as a
    *not null terminated* sequence of characters
    Then 8 bytes (interpreted as an unsigned long) are the data size.
    Then data_size bytes represent the actual data contained in the file.
    --------------------------------------------------------------------------------------------
    | FILE_P (1) | name_length (8) | filename (name_length) | data_size (8) | data (data_size) |
    --------------------------------------------------------------------------------------------

- FILE_SEQUENCE: this packet indicates that will be sent multiple files as separate packets
    The first 8 bytes (interpreted as a signed long) indicates how many files
    will be sent.
    ---------------------------------
    | FILE_SEQUENCE (1) | count (8) |
    ---------------------------------

- OPEN_FILE: the packet contains a request of file creation
    The first 8 bytes (interpreted as an unsigned long) are the filename size.
    Then name_length bytes represent the name of the file represented as a
    *not null terminated* sequence of characters
    Then 1 byte 1 byte represent the open flags (O_CREATE | O_LOCK)
    ------------------------------------------------------------------------
    | OPEN_FILE (1) | name_length (8) | filename (name_length) | flags (1) |
    ------------------------------------------------------------------------
    
- CLOSE_FILE: the packet contains a request of file closing
    The first 8 bytes (interpreted as an unsigned long) are the filename size.
    Then name_length bytes represent the name of the file represented as a
    *not null terminated* sequence of characters
    -------------------------------------------------------------
    | CLOSE_FILE (1) | name_length (8) | filename (name_length) |
    -------------------------------------------------------------

- WRITE_FILE: the packet contains a request of file writing
    The first 8 bytes (interpreted as an unsigned long) are the filename size.
    Then name_length bytes represent the name of the file represented as a
    *not null terminated* sequence of characters
    Then 8 bytes (interpreted as an unsigned long) are the data size.
    Then data_size bytes represent the actual data contained in the file.
    ------------------------------------------------------------------------------------------------
    | WRITE_FILE (1) | name_length (8) | filename (name_length) | data_size (8) | data (data_size) |
    ------------------------------------------------------------------------------------------------

- READ_FILE: the packet contains a request of file read
    The first 8 bytes (interpreted as an unsigned long) are the filename size.
    Then name_length bytes represent the name of the file represented as a
    *not null terminated* sequence of characters
    ------------------------------------------------------------
    | READ_FILE (1) | name_length (8) | filename (name_length) |
    ------------------------------------------------------------

- READ_N_FILES:the packet contains a request of reading n files at random.
    The first 8 bytes (interpreted as a signed long) indicates how many files
    the client is requesting
    --------------------------------
    | READ_N_FILES (1) | count (8) |
    --------------------------------

- APPEND_TO_FILE the packet contains a request to append to a file some data
    The first 8 bytes (interpreted as an unsigned long) are the filename size.
    Then name_length bytes represent the name of the file represented as a
    *not null terminated* sequence of characters
    Then 8 bytes (interpreted as an unsigned long) are the data size.
    Then data_size bytes represent the actual data contained in the file.
    ------------------------------------------------------------------------------------------------
    | WRITE_FILE (1) | name_length (8) | filename (name_length) | data_size (8) | data (data_size) |
    ------------------------------------------------------------------------------------------------

- LOCK_FILE: the packet contains a request to lock a file
    The first 8 bytes (interpreted as an unsigned long) are the filename size.
    Then name_length bytes represent the name of the file represented as a
    *not null terminated* sequence of characters
    ------------------------------------------------------------
    | LOCK_FILE (1) | name_length (8) | filename (name_length) |
    ------------------------------------------------------------

- UNLOCK_FILE: the packet contains a request to unlock a file
    The first 8 bytes (interpreted as an unsigned long) are the filename size.
    Then name_length bytes represent the name of the file represented as a
    *not null terminated* sequence of characters
    --------------------------------------------------------------
    | UNLOCK_FILE (1) | name_length (8) | filename (name_length) |
    --------------------------------------------------------------

- REMOVE_FILE: the packet contains a request to remove a file
    The first 8 bytes (interpreted as an unsigned long) are the filename size.
    Then name_length bytes represent the name of the file represented as a
    *not null terminated* sequence of characters
    --------------------------------------------------------------
    | REMOVE_FILE (1) | name_length (8) | filename (name_length) |
    --------------------------------------------------------------

2. ================== Protocol specification ==================

See msc_noerrors.png for the specification of all the operations.